package com.example.password_practice.config;

import com.example.password_practice.service.CustomUserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Autowired
    private CustomUserDetailsService userDetailsService;

    /**
     * BCrypt Ìå®Ïä§ÏõåÎìú Ïù∏ÏΩîÎçî ÏÑ§Ï†ï
     * Cost Factor 12 ÏÇ¨Ïö© (2^12 = 4,096Î≤à Ìï¥Ïã±)
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        // - 4~6: ÌÖåÏä§Ìä∏Ïö© (Îπ†Î•¥ÏßÄÎßå Î≥¥Ïïà ÏïΩÌï®)
        // - 10~12: Ïö¥ÏòÅÌôòÍ≤Ω Í∂åÏû• (Í∑†ÌòïÏû°Ìûå Î≥¥ÏïàÍ≥º ÏÑ±Îä•)
        // - 13~15: Í≥†Î≥¥Ïïà ÌôòÍ≤Ω (ÎäêÎ¶¨ÏßÄÎßå Îß§Ïö∞ ÏïàÏ†Ñ)

        int costFactor = 12;

        System.out.println("üîê BCrypt Ìå®Ïä§ÏõåÎìú Ïù∏ÏΩîÎçî ÏÑ§Ï†ï");
        System.out.println("üìä Cost Factor: " + costFactor + " (2^" + costFactor + " = " +
                Math.pow(2, costFactor) + "Î≤à Ìï¥Ïã±)");

        return new BCryptPasswordEncoder(costFactor);
    }

    /**
     * Î≥¥Ïïà ÌïÑÌÑ∞ Ï≤¥Ïù∏ ÏÑ§Ï†ï
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/", "/register", "/h2-console/**", "/css/**", "/js/**", "/error").permitAll()
                        .requestMatchers("/password-test/**").permitAll()   // ÌÖåÏä§Ìä∏Ïö©
                        .anyRequest().authenticated()
                )
                .formLogin(form -> form.loginPage("/login").permitAll()
                        .defaultSuccessUrl("/dashboard", true)
                        .failureUrl("/login?error=true")
                )
                .logout(logout -> logout
                        .logoutSuccessUrl("/login?logout=true")
                        .permitAll()
                )
                // H2 ÏΩòÏÜîÏùÑ ÏúÑÌïú ÏÑ§Ï†ï
                .headers(headers -> headers.frameOptions(frame -> frame.disable()))
                .csrf(csrf -> csrf
                        .ignoringRequestMatchers("/h2-console/**")
                        .ignoringRequestMatchers("/password-test/**")
                        .ignoringRequestMatchers("/register")
                )
                // ÏÑ∏ÏÖò Í¥ÄÎ¶¨ ÏÑ§Ï†ï
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                        .enableSessionUrlRewriting(false)   // URLÏóê ÏÑ∏ÏÖòID Ìè¨Ìï® Î∞©ÏßÄ
                )
                .build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider(userDetailsService);
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;
    }
}
